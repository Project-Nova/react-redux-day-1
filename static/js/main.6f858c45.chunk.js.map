{"version":3,"sources":["redux/actions.js","components/AddTodo.js","redux/action-types.js","components/Todo.js","constants.js","redux/selectors.js","components/TodoList.js","components/VisibilityFilters.js","App.js","serviceWorker.js","redux/reducers/visibility-filter.js","redux/reducers/todos.js","redux/reducers/index.js","redux/store.js","index.js"],"names":["nextTodoId","AddTodo","props","updateInput","input","setState","handleAddTodo","addTodo","state","onChange","e","target","value","this","className","onClick","React","Component","connect","content","type","payload","id","toggleTodo","todo","completed","cx","VISIBILITY_FILTERS","ALL","COMPLETED","INCOMPLETE","getTodosState","store","todos","getTodos","allIds","getTodoList","map","byIds","getTodoById","visibilityFilter","allTodos","filter","getTodosByVisibilityFilter","length","index","key","activeFilter","setFilter","Object","keys","filterKey","currentFilter","App","Boolean","window","location","hostname","match","initialState","action","combineReducers","createStore","rootReducer","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAEIA,EAAa,ECEXC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAIRC,YAAc,SAAAC,GACZ,EAAKC,SAAS,CAAED,WANC,EASnBE,cAAgB,WACd,EAAKJ,MAAMK,QAAQ,EAAKC,MAAMJ,OAC9B,EAAKC,SAAS,CAAED,MAAO,MATvB,EAAKI,MAAQ,CAAEJ,MAAO,IAFL,E,sEAcT,IAAD,OACP,OACE,6BACE,2BACEK,SAAU,SAAAC,GAAC,OAAI,EAAKP,YAAYO,EAAEC,OAAOC,QACzCA,MAAOC,KAAKL,MAAMJ,QAEpB,4BAAQU,UAAU,WAAWC,QAASF,KAAKP,eAA3C,iB,GAtBcU,IAAMC,WA8BbC,cACb,KACA,CAAEX,QDhCmB,SAAAY,GAAO,MAAK,CACjCC,KELsB,WFMtBC,QAAS,CACPC,KAAMtB,EACNmB,cC0BWD,CAGbjB,G,gBEjBaiB,cACb,KACA,CAAEK,WHVsB,SAAAD,GAAE,MAAK,CAC/BF,KEZyB,cFazBC,QAAS,CAAEC,SGMEJ,EAfF,SAAC,GAAD,IAAGM,EAAH,EAAGA,KAAMD,EAAT,EAASA,WAAT,OACX,wBAAIT,UAAU,YAAYC,QAAS,kBAAMQ,EAAWC,EAAKF,MACtDE,GAAQA,EAAKC,UAAY,eAAO,eAAM,IACvC,0BACEX,UAAWY,IACT,kBACAF,GAAQA,EAAKC,WAAa,+BAG3BD,EAAKL,a,OCdCQ,EAAqB,CAC9BC,IAAK,MACLC,UAAW,YACXC,WAAY,cCDHC,EAAgB,SAAAC,GAAK,OAAIA,EAAMC,OAQ/BC,EAAW,SAAAF,GAAK,OANF,SAAAA,GAAK,OAC9BD,EAAcC,GAASD,EAAcC,GAAOG,OAAS,GAMrDC,CAAYJ,GAAOK,KAAI,SAAAf,GAAE,OAJA,SAACU,EAAOV,GAAR,OACzBS,EAAcC,GAAd,eAA4BD,EAAcC,GAAOM,MAAMhB,GAAvD,CAA4DA,OAAO,GAGtCiB,CAAYP,EAAOV,OCWnCJ,eANS,SAAAV,GAGtB,MAAO,CAAEyB,MDN+B,SAACD,EAAOQ,GAChD,IAAMC,EAAWP,EAASF,GAC1B,OAAQQ,GACN,KAAKb,EAAmBE,UACtB,OAAOY,EAASC,QAAO,SAAAlB,GAAI,OAAIA,EAAKC,aACtC,KAAKE,EAAmBG,WACtB,OAAOW,EAASC,QAAO,SAAAlB,GAAI,OAAKA,EAAKC,aACvC,KAAKE,EAAmBC,IACxB,QACE,OAAOa,GCJGE,CAA2BnC,EADZA,EAArBgC,qBAKKtB,EAjBE,SAAC,GAAD,IAAGe,EAAH,EAAGA,MAAH,OACf,wBAAInB,UAAU,aACXmB,GAASA,EAAMW,OACZX,EAAMI,KAAI,SAACb,EAAMqB,GACf,OAAO,kBAAC,EAAD,CAAMC,IAAG,eAAUtB,EAAKF,IAAME,KAAMA,OAE7C,qBCuBON,eAJS,SAAAV,GACtB,MAAO,CAAEuC,aAAcvC,EAAMgC,oBAK7B,CAAEQ,UPnBqB,SAAAN,GAAM,MAAK,CAAEtB,KEfZ,aFe8BC,QAAS,CAAEqB,aOiBpDxB,EA5BW,SAAC,GAAiC,IAA/B6B,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACzC,OACE,yBAAKlC,UAAU,sBACZmC,OAAOC,KAAKvB,GAAoBU,KAAI,SAAAc,GACnC,IAAMC,EAAgBzB,EAAmBwB,GACzC,OACE,0BACEL,IAAG,4BAAuBM,GAC1BtC,UAAWY,IACT,SACA0B,IAAkBL,GAAgB,kBAEpChC,QAAS,WACPiC,EAAUI,KAGXA,UCLEC,MAXf,WACE,OACE,yBAAKvC,UAAU,YACb,yCACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCfAC,EAAehC,EAAmBC,IAazBY,EAXU,WAAmC,IAAlChC,EAAiC,uDAAzBmD,EAAcC,EAAW,uCACzD,OAAQA,EAAOxC,MACb,IRLsB,aQMpB,OAAOwC,EAAOvC,QAAQqB,OAExB,QACE,OAAOlC,I,eCTPmD,EAAe,CACnBxB,OAAQ,GACRG,MAAO,ICAMuB,cAAgB,CAAE5B,MDGlB,WAAwC,IAA/BzB,EAA8B,uDAAtBmD,EAAcC,EAAQ,uCACpD,OAAQA,EAAOxC,MACb,ITToB,WSSJ,IAAD,EACWwC,EAAOvC,QAAvBC,EADK,EACLA,GAAIH,EADC,EACDA,QACZ,OAAO,eACFX,EADL,CAEE2B,OAAO,GAAD,mBAAM3B,EAAM2B,QAAZ,CAAoBb,IAC1BgB,MAAM,eACD9B,EAAM8B,MADN,eAEFhB,EAAK,CACJH,UACAM,WAAW,OAKnB,ITtBuB,cSsBJ,IACTH,EAAOsC,EAAOvC,QAAdC,GACR,OAAO,eACFd,EADL,CAEE8B,MAAM,eACD9B,EAAM8B,MADN,eAEFhB,EAFE,eAGEd,EAAM8B,MAAMhB,GAHd,CAIDG,WAAYjB,EAAM8B,MAAMhB,GAAIG,gBAKpC,QACE,OAAOjB,ICjC2BgC,qBCDzBsB,cAAYC,GCI3BC,IAASC,OACL,kBAAC,IAAD,CAAUjC,MAAOA,GACb,kBAAC,EAAD,OACSkC,SAASC,eAAe,SLyHnC,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f858c45.chunk.js","sourcesContent":["import { ADD_TODO, TOGGLE_TODO, SET_FILTER } from \"./action-types\";\r\n\r\nlet nextTodoId = 0;\r\n\r\nexport const addTodo = content => ({\r\n  type: ADD_TODO,\r\n  payload: {\r\n    id: ++nextTodoId,\r\n    content\r\n  }\r\n});\r\n\r\nexport const toggleTodo = id => ({\r\n  type: TOGGLE_TODO,\r\n  payload: { id }\r\n});\r\n\r\nexport const setFilter = filter => ({ type: SET_FILTER, payload: { filter } });\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addTodo } from \"../redux/actions\";\r\n\r\nclass AddTodo extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { input: \"\" };\r\n  }\r\n\r\n  updateInput = input => {\r\n    this.setState({ input });\r\n  };\r\n\r\n  handleAddTodo = () => {\r\n    this.props.addTodo(this.state.input);\r\n    this.setState({ input: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <input\r\n          onChange={e => this.updateInput(e.target.value)}\r\n          value={this.state.input}\r\n        />\r\n        <button className=\"add-todo\" onClick={this.handleAddTodo}>\r\n          Add Todo\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  null,\r\n  { addTodo }\r\n)(AddTodo);\r\n// export default AddTodo;\r\n","export const ADD_TODO = \"ADD_TODO\";\r\nexport const TOGGLE_TODO = \"TOGGLE_TODO\";\r\nexport const SET_FILTER = \"SET_FILTER\";\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport cx from \"classnames\";\r\nimport { toggleTodo } from \"../redux/actions\";\r\n\r\nconst Todo = ({ todo, toggleTodo }) => (\r\n  <li className=\"todo-item\" onClick={() => toggleTodo(todo.id)}>\r\n    {todo && todo.completed ? \"ðŸ‘Œ\" : \"ðŸ‘‹\"}{\" \"}\r\n    <span\r\n      className={cx(\r\n        \"todo-item__text\",\r\n        todo && todo.completed && \"todo-item__text--completed\"\r\n      )}\r\n    >\r\n      {todo.content}\r\n    </span>\r\n  </li>\r\n);\r\n\r\n// export default Todo;\r\nexport default connect(\r\n  null,\r\n  { toggleTodo }\r\n)(Todo);\r\n","export const VISIBILITY_FILTERS = {\r\n    ALL: \"all\",\r\n    COMPLETED: \"completed\",\r\n    INCOMPLETE: \"incomplete\"\r\n  };\r\n  ","import { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nexport const getTodosState = store => store.todos;\r\n\r\nexport const getTodoList = store =>\r\n  getTodosState(store) ? getTodosState(store).allIds : [];\r\n\r\nexport const getTodoById = (store, id) =>\r\n  getTodosState(store) ? { ...getTodosState(store).byIds[id], id } : {};\r\n\r\nexport const getTodos = store =>\r\n  getTodoList(store).map(id => getTodoById(store, id));\r\n\r\nexport const getTodosByVisibilityFilter = (store, visibilityFilter) => {\r\n  const allTodos = getTodos(store);\r\n  switch (visibilityFilter) {\r\n    case VISIBILITY_FILTERS.COMPLETED:\r\n      return allTodos.filter(todo => todo.completed);\r\n    case VISIBILITY_FILTERS.INCOMPLETE:\r\n      return allTodos.filter(todo => !todo.completed);\r\n    case VISIBILITY_FILTERS.ALL:\r\n    default:\r\n      return allTodos;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Todo from \"./Todo\";\r\nimport { getTodosByVisibilityFilter } from \"../redux/selectors\";\r\n\r\nconst TodoList = ({ todos }) => (\r\n  <ul className=\"todo-list\">\r\n    {todos && todos.length\r\n      ? todos.map((todo, index) => {\r\n          return <Todo key={`todo-${todo.id}`} todo={todo} />;\r\n        })\r\n      : \"No todos, yay!\"}\r\n  </ul>\r\n);\r\n\r\n\r\nconst mapStateToProps = state => {\r\n  const { visibilityFilter } = state;\r\n  const todos = getTodosByVisibilityFilter(state, visibilityFilter);\r\n  return { todos };\r\n};\r\n\r\nexport default connect(mapStateToProps)(TodoList);\r\n","import React from \"react\";\r\nimport cx from \"classnames\";\r\nimport { connect } from \"react-redux\";\r\nimport { setFilter } from \"../redux/actions\";\r\nimport { VISIBILITY_FILTERS } from \"../constants\";\r\n\r\nconst VisibilityFilters = ({ activeFilter, setFilter }) => {\r\n  return (\r\n    <div className=\"visibility-filters\">\r\n      {Object.keys(VISIBILITY_FILTERS).map(filterKey => {\r\n        const currentFilter = VISIBILITY_FILTERS[filterKey];\r\n        return (\r\n          <span\r\n            key={`visibility-filter-${currentFilter}`}\r\n            className={cx(\r\n              \"filter\",\r\n              currentFilter === activeFilter && \"filter--active\"\r\n            )}\r\n            onClick={() => {\r\n              setFilter(currentFilter);\r\n            }}\r\n          >\r\n            {currentFilter}\r\n          </span>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return { activeFilter: state.visibilityFilter };\r\n};\r\n// export default VisibilityFilters;\r\nexport default connect(\r\n  mapStateToProps,\r\n  { setFilter }\r\n)(VisibilityFilters);\r\n","import React from 'react';\nimport './App.css';\nimport AddTodo from \"./components/AddTodo\";\nimport TodoList from \"./components/TodoList\";\nimport VisibilityFilters from \"./components/VisibilityFilters\";\n\nfunction App() {\n  return (\n    <div className=\"todo-app\">\n      <h1>Microsoft</h1>\n      <AddTodo />\n      <TodoList />\n      <VisibilityFilters />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { SET_FILTER } from \"../action-types\";\r\nimport { VISIBILITY_FILTERS } from \"../../constants\";\r\n\r\nconst initialState = VISIBILITY_FILTERS.ALL;\r\n\r\nconst visibilityFilter = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_FILTER: {\r\n      return action.payload.filter;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport default visibilityFilter;\r\n","import { ADD_TODO, TOGGLE_TODO } from \"../action-types\";\r\n\r\nconst initialState = {\r\n  allIds: [],\r\n  byIds: {}\r\n};\r\n\r\nexport default function(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TODO: {\r\n      const { id, content } = action.payload;\r\n      return {\r\n        ...state,\r\n        allIds: [...state.allIds, id],\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            content,\r\n            completed: false\r\n          }\r\n        }\r\n      };\r\n    }\r\n    case TOGGLE_TODO: {\r\n      const { id } = action.payload;\r\n      return {\r\n        ...state,\r\n        byIds: {\r\n          ...state.byIds,\r\n          [id]: {\r\n            ...state.byIds[id],\r\n            completed: !state.byIds[id].completed\r\n          }\r\n        }\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport visibilityFilter from \"./visibility-filter\";\r\nimport todos from \"./todos\";\r\n\r\nexport default combineReducers({ todos, visibilityFilter });\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"./reducers\";\r\n\r\nexport default createStore(rootReducer);\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from \"./redux/store\";\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}